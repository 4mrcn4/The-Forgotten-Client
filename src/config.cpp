/*
  The Forgotten Client
  Copyright (C) 2020 Saiyans King

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/

#include "config.h"

Config::Config()
{
	m_fileHandle = NULL;
	m_saveHandle = false;
}

Config::~Config()
{
	if(m_fileHandle)
	{
		if(m_saveHandle)
			saveFile();

		SDL_RWclose(m_fileHandle);
	}
}

bool Config::openToRead(const char* fileName)
{
	m_fileHandle = SDL_RWFromFile(fileName, "rb");
	if(m_fileHandle)
	{
		SDL_RWseek(m_fileHandle, 0, RW_SEEK_END);
		Sint32 sizeData = SDL_static_cast(Sint32, SDL_RWtell(m_fileHandle));
		if(sizeData > 0)
		{
			std::string data(sizeData, '\0');
			SDL_RWseek(m_fileHandle, 0, RW_SEEK_SET);
			SDL_RWread(m_fileHandle, &data[0], 1, SDL_static_cast(size_t, sizeData));

			StringVector dataKeys = UTIL_explodeString(data, "\n");
			for(size_t i = 0, end = dataKeys.size(); i < end; ++i)
			{
				std::string& value = dataKeys[i];
				if(value.size() < 5 || value[0] == '#')
					continue;
				else if(value[value.length() - 1] == '\r')
					value.pop_back();

				StringVector keys = UTIL_explodeString(value, " = ");
				if(keys.size() == 2)
					insertKey(keys[0], keys[1]);
			}
		}
		return true;
	}
	return false;
}

bool Config::openToSave(const char* fileName)
{
	m_fileHandle = SDL_RWFromFile(fileName, "wb");
	if(m_fileHandle)
	{
		m_saveHandle = true;
		return true;
	}
	return false;
}

void Config::insertKey(const std::string& keyName, const std::string& value)
{
	m_keys.emplace_back(keyName, value);
}

std::string Config::fetchKey(const std::string& keyName)
{
	for(std::vector<ConfigKey>::iterator it = m_keys.begin(), end = m_keys.end(); it != end; ++it)
	{
		ConfigKey& oldKey = (*it);
		if(oldKey.name == keyName)
			return oldKey.value;
	}
	return std::string();
}

StringVector Config::fetchKeys(const std::string& keyName)
{
	StringVector returnVector;
	for(std::vector<ConfigKey>::iterator it = m_keys.begin(), end = m_keys.end(); it != end; ++it)
	{
		ConfigKey& oldKey = (*it);
		if(oldKey.name == keyName)
			returnVector.push_back(oldKey.value);
	}
	return returnVector;
}

void Config::insertNewLine()
{
	#if defined(SDL_VIDEO_DRIVER_WINDOWS)
	SDL_WriteU8(m_fileHandle, '\r');
	#endif
	SDL_WriteU8(m_fileHandle, '\n');
}

void Config::saveFile()
{
	Sint32 len = SDL_snprintf(g_buffer, sizeof(g_buffer), "# This is the config file for %s", PRODUCT_NAME);
	SDL_RWwrite(m_fileHandle, g_buffer, 1, SDL_static_cast(size_t, len));
	insertNewLine();
	len = SDL_snprintf(g_buffer, sizeof(g_buffer), "# DO NOT EDIT THIS FILE");
	SDL_RWwrite(m_fileHandle, g_buffer, 1, SDL_static_cast(size_t, len));
	insertNewLine();
	for(std::vector<ConfigKey>::iterator it = m_keys.begin(), end = m_keys.end(); it != end; ++it)
	{
		ConfigKey& oldKey = (*it);
		insertNewLine();
		SDL_RWwrite(m_fileHandle, oldKey.name.c_str(), 1, oldKey.name.length());
		SDL_RWwrite(m_fileHandle, " = ", 1, 3);
		SDL_RWwrite(m_fileHandle, oldKey.value.c_str(), 1, oldKey.value.length());
	}
}
